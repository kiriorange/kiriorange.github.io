{"version":3,"sources":["Components/About.js","Components/Contact.js","Components/Project.js","Components/AllProjects.js","Components/ProjectPage.js","App.js","serviceWorker.js","index.js"],"names":["About","react_default","a","createElement","Component","Contact","Project","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","expanded","displayText","expandText","class","thumbnail","title","shortdesc","techs","projectData","push","src","alt","tech","long","Projects","allProjects","map","p","Components_Project","renderProjects","Router","BrowserRouter","App","className","Link","to","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2SAUeA,0LANX,OACIC,EAAAC,EAAAC,cAAA,2BAHYC,cCQLC,mLANX,OACIJ,EAAAC,EAAAC,cAAA,6BAHcC,aC6BPE,qBA3Bb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,UAAU,EACVC,YAAa,GACbC,WAAY,IALGV,wEAUjB,IAAID,EAAQI,KAAKJ,MAEjB,OACEN,EAAAC,EAAAC,cAAA,OAAKgB,MAAM,WAAX,UAEGZ,EAAMa,UACPnB,EAAAC,EAAAC,cAAA,QAAMgB,MAAM,SAASZ,EAAMc,OAC3BpB,EAAAC,EAAAC,cAAA,OAAKgB,MAAM,QAAQZ,EAAMe,yCAK1BC,WAvBenB,cCGlBoB,EAAc,GAElBA,EAAYC,KAAK,CACfJ,MAAO,qBACPD,UAAWnB,EAAAC,EAAAC,cAAA,OAAKgB,MAAM,YAAYO,IAAI,gEAAgEC,IAAI,YAC1GL,UAAW,kDACXM,KAAK,CATE,OACM,cASbC,KAAM5B,EAAAC,EAAAC,cAAA,+CAMOqB,QCGAM,2LAhBT,OACEC,EAAYC,IAAI,SAASC,GACvB,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,CAASd,UAAWa,EAAEb,UAAWE,UAAWW,EAAEX,UAAWD,MAAOY,EAAEZ,2CAM/E,OACIpB,EAAAC,EAAAC,cAAA,sBACCQ,KAAKwB,yBAZS/B,aCInBgC,EAASC,IACPC,mLAEF,OACErC,EAAAC,EAAAC,cAACiC,EAAD,KACAnC,EAAAC,EAAAC,cAAA,OAAKoC,UAAU,aAEftC,EAAAC,EAAAC,cAAA,OAAKoC,UAAU,OACftC,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAMC,GAAG,KAAT,QACAxC,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAMC,GAAG,aAAT,YACAxC,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAMC,GAAG,YAAT,YAGAxC,EAAAC,EAAAC,cAAA,OAAKoC,UAAU,QACftC,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW7C,IACjCC,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAOE,KAAK,YAAYC,UAAWf,IACnC7B,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAOE,KAAK,WAAWC,UAAWxC,cAftBD,aAiCHkC,IC9BKQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.93db3cb5.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass About extends Component {\n  render() {\n    return(\n        <div>About</div>\n    )\n  }\n}\n\nexport default About;\n","import React, { Component } from 'react';\n\nclass Contact extends Component {\n  render() {\n    return(\n        <div>Contact</div>\n    )\n  }\n}\n\nexport default Contact;\n","import React, { Component } from 'react';\nimport '../Styles/Project.css'\n\nclass Project extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      expanded: false,\n      displayText: \"\",\n      expandText: \"\"\n    }\n  }\n\n  render() {\n    var props = this.props;\n    \n    return (\n      <div class=\"project\">\n        Project\n        {props.thumbnail}\n        <span class=\"title\">{props.title}</span>\n        <div class=\"desc\">{props.shortdesc}</div>\n      </div>\n    )\n  }\n\n  tech(techs) {\n\n  }\n}\n\nexport default Project;\n","import React from 'react';\n\nconst net = \".NET\",\n  java = \"Java\",\n  javascript = \"JavaScript\";\n\nvar projectData = []\n\nprojectData.push({\n  title: \"Wiki Translate Bot\",\n  thumbnail: <img class=\"thumbnail\" src=\"https://cdn2.iconfinder.com/data/icons/dog-2/32/husky-512.png\" alt=\"animage\"/>,\n  shortdesc: \"description asdfasdfasdfa asdf asdf asdf asfd a\",\n  tech:[java, javascript],\n  long: <div>So here i di d tihsl and blah </div>\n})\n\n\n\n\nexport default projectData;\n","import React, { Component } from 'react';\nimport Project from './Project';\nimport allProjects from './AllProjects';\n\nclass Projects extends Component {\n  renderProjects() {\n      return (\n        allProjects.map(function(p) {\n          return <Project thumbnail={p.thumbnail} shortdesc={p.shortdesc} title={p.title} />;\n        })\n      )\n  }\n\n  render() {\n    return(\n        <div>Projects\n        {this.renderProjects()}\n        </div>\n    )\n  }\n}\n\nexport default Projects;\n","import React, { Component } from 'react';\nimport { BrowserRouter, Link, Route } from 'react-router-dom';\nimport './App.css';\nimport About from './Components/About';\nimport Contact from './Components/Contact';\nimport Projects from './Components/ProjectPage';\n\n\nlet Router = BrowserRouter;\nclass App extends Component {\n  render(){\n    return(\n      <Router>\n      <div className=\"container\">\n\n      <div className=\"nav\">\n      <Link to=\"/\">Home</Link>\n      <Link to=\"/projects\">Projects</Link>\n      <Link to=\"/contact\">Contact</Link>\n      </div>\n\n      <div className=\"text\">\n      <Route exact path=\"/\" component={About} />\n      <Route path=\"/projects\" component={Projects} />\n      <Route path=\"/contact\" component={Contact} />\n      </div>\n\n      </div>\n      </Router>\n    )\n  }\n}\n\n//State less components\n//Home\nconst Header = ()=> (\n  <div>\n  <div className=\"header\"></div>\n  <App />\n  </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}